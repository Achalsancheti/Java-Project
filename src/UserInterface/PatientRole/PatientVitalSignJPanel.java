/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.MainUserAccount.MainUserAccount;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.WorkQueue.SmartWatchWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Achal Sancheti
 */
public class PatientVitalSignJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    MainUserAccount account;
    Enterprise enterprise;
    EcoSystem business;
    private Timer t = null;
    private int count = 0;
    /**
     * Creates new form CalculateVitalSignJPanel
     */
    public PatientVitalSignJPanel(JPanel userProcessContainer,MainUserAccount account,Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.enterprise=enterprise;
        this.business=business;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        calculateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Respiratory Rate");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Heart Rate");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Blood Pressure");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Weight");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, -1, -1));

        calculateButton.setBackground(new java.awt.Color(0, 0, 0));
        calculateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        calculateButton.setForeground(new java.awt.Color(255, 255, 255));
        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });
        add(calculateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, 101, 32));

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 33));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/handsmartwatch.jpg"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 450, 380));

        ProgressBar.setStringPainted(true);
        add(ProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 290, -1));

        jLabel6.setText("jLabel6");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 180, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed

        t = new Timer(50, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                count++;
                ProgressBar.setValue(count);
                if (ProgressBar.getValue() < 100) {
                    ProgressBar.setValue(ProgressBar.getValue() + 1);
                    ProgressBar.setForeground(Color.BLUE);
                }
                if (ProgressBar.getValue() == 100) {
                    t.stop();
                String date = new java.text.SimpleDateFormat("MM/dd/yyyy").format(new Date());
                String time = new java.text.SimpleDateFormat("h:mm:ss a").format(new Date());

                SmartWatchWorkRequest smartWatchWorkRequest = new SmartWatchWorkRequest();

                smartWatchWorkRequest.setDate(date);
                smartWatchWorkRequest.setTime(time);
                smartWatchWorkRequest.setSender(account);

                
             if((smartWatchWorkRequest.getRespiratoryRate()<10 || smartWatchWorkRequest.getRespiratoryRate()>190) || (smartWatchWorkRequest.getHeartRate()<10 || smartWatchWorkRequest.getHeartRate()>190) || (smartWatchWorkRequest.getBloodPressure()<10 || smartWatchWorkRequest.getBloodPressure()>190) || (smartWatchWorkRequest.getWeight()<10 || smartWatchWorkRequest.getWeight()>190)){
                 smartWatchWorkRequest.setCondition("Danger");
                    }else{
                    
                 if((smartWatchWorkRequest.getRespiratoryRate()>=20 && smartWatchWorkRequest.getRespiratoryRate()<=30) && (smartWatchWorkRequest.getHeartRate()>=80 && smartWatchWorkRequest.getHeartRate()<=110) && (smartWatchWorkRequest.getBloodPressure()>=80 && smartWatchWorkRequest.getBloodPressure()<=110) && (smartWatchWorkRequest.getWeight()>=22 && smartWatchWorkRequest.getWeight()<=31)){
                        smartWatchWorkRequest.setCondition("Normal");
                    }
                    else{
                        smartWatchWorkRequest.setCondition("Abnormal");
                    }
                
                    if((smartWatchWorkRequest.getRespiratoryRate()>=20 && smartWatchWorkRequest.getRespiratoryRate()<=30) && (smartWatchWorkRequest.getHeartRate()>=70 && smartWatchWorkRequest.getHeartRate()<=120) && (smartWatchWorkRequest.getBloodPressure()>=80 && smartWatchWorkRequest.getBloodPressure()<=110) && (smartWatchWorkRequest.getWeight()>=31 && smartWatchWorkRequest.getWeight()<=40)){
                            smartWatchWorkRequest.setCondition("Normal");
                        }
                        else{
                            smartWatchWorkRequest.setCondition("Abnormal");
                        }
                    
                    if((smartWatchWorkRequest.getRespiratoryRate()>=15 && smartWatchWorkRequest.getRespiratoryRate()<=25) && (smartWatchWorkRequest.getHeartRate()>=60 && smartWatchWorkRequest.getHeartRate()<=110) && (smartWatchWorkRequest.getBloodPressure()>=80 && smartWatchWorkRequest.getBloodPressure()<=120) && (smartWatchWorkRequest.getWeight()>=41 && smartWatchWorkRequest.getWeight()<=92)){
                                smartWatchWorkRequest.setCondition("Normal");
                            }
                            else{
                                smartWatchWorkRequest.setCondition("Abnormal");
                            }
                        
                    if((smartWatchWorkRequest.getRespiratoryRate()>=12 && smartWatchWorkRequest.getRespiratoryRate()<=20) && (smartWatchWorkRequest.getHeartRate()>=55 && smartWatchWorkRequest.getHeartRate()<=105) && (smartWatchWorkRequest.getBloodPressure()>=110 && smartWatchWorkRequest.getBloodPressure()<=120) && (smartWatchWorkRequest.getWeight()>=110 && smartWatchWorkRequest.getWeight()<=180)){
                                    smartWatchWorkRequest.setCondition("Normal");
                                }
                                else{
                                    smartWatchWorkRequest.setCondition("Abnormal");
                                }
             }

             Enterprise ent = null;
        Organization org = null;
        for(Network network : business.getNetworkList()){
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise instanceof HospitalEnterprise)
                        ent=enterprise;


                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof DoctorOrganization){
                        org = organization;
                        break;
                    }
                }
            }
        }

                if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(smartWatchWorkRequest);
                    account.getWorkQueue().getWorkRequestList().add(smartWatchWorkRequest);
                }

                JOptionPane.showMessageDialog(null, "Vital Sign Has Been Calculated","Success",JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        t.start();
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SmartWatchJPanel lwjp = (SmartWatchJPanel) component;
        lwjp.populateTable();
        lwjp.vitalrange();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JButton backButton;
    private javax.swing.JButton calculateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
