/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Enterprise.Enterprise;
import Business.MainUserAccount.MainUserAccount;
import Business.WorkQueue.DoorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Achal Sancheti
 */
public class ManageDoorsJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    MainUserAccount account;
    Enterprise enterprise;
    
    /**
     * Creates new form ManageDoorsJPanel
     */
    public ManageDoorsJPanel(JPanel userProcessContainer,MainUserAccount account,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.enterprise=enterprise;
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) doorTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request: account.getWorkQueue().getWorkRequestList()){
            if(request instanceof DoorWorkRequest){
            
            Object[] row = new Object[4];
            
            String door = ((DoorWorkRequest)request).getDoor();
            row[0] = request;
            row[1] = request.getStatus();
            row[2] = request.getDate();
            row[3] = request.getTime();
            
            model.addRow(row);
        }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doorTable = new javax.swing.JTable();
        lockdoorButton = new javax.swing.JButton();
        unlockdoorButton = new javax.swing.JButton();
        managedoorButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Door", "Status", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doorTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 91, 712, 136));

        lockdoorButton.setBackground(new java.awt.Color(0, 0, 0));
        lockdoorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lockdoorButton.setForeground(new java.awt.Color(255, 255, 255));
        lockdoorButton.setText("Lock Door");
        lockdoorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockdoorButtonActionPerformed(evt);
            }
        });
        add(lockdoorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 120, 33));

        unlockdoorButton.setBackground(new java.awt.Color(0, 0, 0));
        unlockdoorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unlockdoorButton.setForeground(new java.awt.Color(255, 255, 255));
        unlockdoorButton.setText("Unlock Door");
        unlockdoorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockdoorButtonActionPerformed(evt);
            }
        });
        add(unlockdoorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 130, 33));

        managedoorButton.setBackground(new java.awt.Color(0, 0, 0));
        managedoorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        managedoorButton.setForeground(new java.awt.Color(255, 255, 255));
        managedoorButton.setText("Manage Door");
        managedoorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managedoorButtonActionPerformed(evt);
            }
        });
        add(managedoorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 280, 140, 33));

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, -1, 33));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 50, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/door.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 60, 530, 450));
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void lockdoorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockdoorButtonActionPerformed
        
        int selectedRow = doorTable.getSelectedRow();

        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Would You Like To Lock Door?");
            if(dialogResult==JOptionPane.YES_OPTION){
            WorkRequest request = (WorkRequest) doorTable.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Locked")) {
                JOptionPane.showMessageDialog(null, "Already Locked.","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }else{
                String date = new java.text.SimpleDateFormat("MM/dd/yyyy").format(new Date());
                String time = new java.text.SimpleDateFormat("h:mm:ss a").format(new Date());
                request.setStatus("Locked");
                request.setDate(date);
                request.setTime(time);
                populateTable();
                JOptionPane.showMessageDialog(null, "Door Has Been Locked Successfully","Success",JOptionPane.INFORMATION_MESSAGE);
        } 
        }
        }else {
            JOptionPane.showMessageDialog(null, "Choose A Door To Process.","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_lockdoorButtonActionPerformed

    private void unlockdoorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockdoorButtonActionPerformed
        
        int selectedRow = doorTable.getSelectedRow();

        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Would You Like To Unlock Door?");
            if(dialogResult==JOptionPane.YES_OPTION){
            WorkRequest request = (WorkRequest) doorTable.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Unlocked")) {
                JOptionPane.showMessageDialog(null, "Already Unlocked","Warning",JOptionPane.WARNING_MESSAGE);
                return;
            }else{
                String date = new java.text.SimpleDateFormat("MM/dd/yyyy").format(new Date());
                String time = new java.text.SimpleDateFormat("h:mm:ss a").format(new Date());
                request.setStatus("Unlocked");
                request.setDate(date);
                request.setTime(time);
                populateTable();
                JOptionPane.showMessageDialog(null, "Door Has Been Unlocked Successfully","Success",JOptionPane.INFORMATION_MESSAGE);
        } 
        }
        }else {
            JOptionPane.showMessageDialog(null, "Choose A Door To Process.","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_unlockdoorButtonActionPerformed

    private void managedoorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managedoorButtonActionPerformed
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestLabTestJPanel", new AddDoorJPanel(userProcessContainer, account,enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_managedoorButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable doorTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lockdoorButton;
    private javax.swing.JButton managedoorButton;
    private javax.swing.JButton unlockdoorButton;
    // End of variables declaration//GEN-END:variables
}
